<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="errEnterNewSystemName" xml:space="preserve">
    <value>Enter new name!</value>
  </data>
  <data name="errEnterSignatureName" xml:space="preserve">
    <value>Type signature name!</value>
  </data>
  <data name="errEnterSystemName" xml:space="preserve">
    <value>Type new system!</value>
  </data>
  <data name="errSignatureNameTaken" xml:space="preserve">
    <value>There is already such signature in the system!</value>
  </data>
  <data name="errSystemNameTaken" xml:space="preserve">
    <value>There is already system with same name!</value>
  </data>
  <data name="infoApiNpcKills" xml:space="preserve">
    <value>Npc</value>
  </data>
  <data name="infoApiPodKills" xml:space="preserve">
    <value>Pod</value>
  </data>
  <data name="infoApiShipKills" xml:space="preserve">
    <value>Ship</value>
  </data>
  <data name="infoPnlApiJumps" xml:space="preserve">
    <value>Jumps (1 hr) :</value>
  </data>
  <data name="infoPnlApiKills" xml:space="preserve">
    <value>Kills (1 hr) :</value>
  </data>
  <data name="infoPnlEffect" xml:space="preserve">
    <value>Effect :</value>
  </data>
  <data name="infoPnlInfo" xml:space="preserve">
    <value>Info :</value>
  </data>
  <data name="infoPnlKilograms" xml:space="preserve">
    <value>kg</value>
  </data>
  <data name="infoPnlLifetime" xml:space="preserve">
    <value>Lifetime :</value>
  </data>
  <data name="infoPnlLifetimeHours" xml:space="preserve">
    <value>hours</value>
  </data>
  <data name="infoPnlMaxMass" xml:space="preserve">
    <value>Max Mass/jump :</value>
  </data>
  <data name="infoPnlNoInfo" xml:space="preserve">
    <value>No information!</value>
  </data>
  <data name="infoPnlOccupied" xml:space="preserve">
    <value>Occupied :</value>
  </data>
  <data name="infoPnlSignatures" xml:space="preserve">
    <value>Signatures :</value>
  </data>
  <data name="infoPnlTarget" xml:space="preserve">
    <value>Target :</value>
  </data>
  <data name="infoPnlTotalMass" xml:space="preserve">
    <value>Total Mass :</value>
  </data>
  <data name="noAddedSignatures" xml:space="preserve">
    <value>no signatures</value>
  </data>
  <data name="staticAddNewSystem" xml:space="preserve">
    <value>Add system, connected with :</value>
  </data>
  <data name="staticAddSignature" xml:space="preserve">
    <value>Add signature to :</value>
  </data>
  <data name="staticAddSignatureName" xml:space="preserve">
    <value>Name :</value>
  </data>
  <data name="staticAddSignatureType" xml:space="preserve">
    <value>Type :</value>
  </data>
  <data name="staticAddSystemClass" xml:space="preserve">
    <value>Class :</value>
  </data>
  <data name="staticAddSystemEffect" xml:space="preserve">
    <value>Effect :</value>
  </data>
  <data name="staticAddSystemName" xml:space="preserve">
    <value>System name :</value>
  </data>
  <data name="staticAddSystemWormIDFromIt" xml:space="preserve">
    <value>Wormhole ID on opposite side :</value>
  </data>
  <data name="staticAddSystemWormIDToIt" xml:space="preserve">
    <value>Wormhole ID leading to it :</value>
  </data>
  <data name="staticEditSignature" xml:space="preserve">
    <value>Edit signature :</value>
  </data>
  <data name="staticEditSignatureNewName" xml:space="preserve">
    <value>Name :</value>
  </data>
  <data name="staticEditSignatureNewType" xml:space="preserve">
    <value>Type :</value>
  </data>
  <data name="staticEditSysNewClass" xml:space="preserve">
    <value>Change class :</value>
  </data>
  <data name="staticEditSysNewEffect" xml:space="preserve">
    <value>Change effect :</value>
  </data>
  <data name="staticEditSysNewName" xml:space="preserve">
    <value>New name :</value>
  </data>
  <data name="staticEditSystem" xml:space="preserve">
    <value>Edit system :</value>
  </data>
  <data name="staticEditSystemInfo" xml:space="preserve">
    <value>Info :</value>
  </data>
  <data name="staticEditSystemOccupied" xml:space="preserve">
    <value>Occupied :</value>
  </data>
  <data name="staticEditWormhole" xml:space="preserve">
    <value>Edit wormhole</value>
  </data>
  <data name="staticEditWormholeFrom" xml:space="preserve">
    <value>from</value>
  </data>
  <data name="staticEditWormholeTo" xml:space="preserve">
    <value>to</value>
  </data>
  <data name="staticInfoForSys" xml:space="preserve">
    <value>Information for</value>
  </data>
  <data name="staticNewSigInfoWatermark" xml:space="preserve">
    <value>Additional info</value>
  </data>
  <data name="staticSignatureTypeNotScanned" xml:space="preserve">
    <value>not scanned</value>
  </data>
  <data name="staticSignatureTypeWormwhole" xml:space="preserve">
    <value>wormhole</value>
  </data>
  <data name="staticSiteErrors" xml:space="preserve">
    <value>* Systems cannot be deleted from the game.</value>
  </data>
  <data name="staticSysAdded" xml:space="preserve">
    <value>Added :</value>
  </data>
  <data name="staticSysAddedBy" xml:space="preserve">
    <value>by</value>
  </data>
  <data name="staticSysConnectedWith" xml:space="preserve">
    <value>Connected :</value>
  </data>
  <data name="staticSysInfo" xml:space="preserve">
    <value>Info :</value>
  </data>
  <data name="staticSysOccupied" xml:space="preserve">
    <value>Occupied :</value>
  </data>
  <data name="staticSysSignatures" xml:space="preserve">
    <value>Signatures :</value>
  </data>
  <data name="staticSystemClassUnknown" xml:space="preserve">
    <value>unknown</value>
  </data>
  <data name="staticSystemClassWormhole" xml:space="preserve">
    <value>wormhole</value>
  </data>
  <data name="staticSystemDeleteConfirm" xml:space="preserve">
    <value>Are you sure, that you want to delete the system?</value>
  </data>
  <data name="staticSystemEffectNoEffect" xml:space="preserve">
    <value>no effect</value>
  </data>
  <data name="staticSystemEffectUnknown" xml:space="preserve">
    <value>unknown</value>
  </data>
  <data name="staticSystemFirstDiscovery" xml:space="preserve">
    <value>First found :</value>
  </data>
  <data name="staticSystemLastDiscovery" xml:space="preserve">
    <value>Last found :</value>
  </data>
  <data name="staticWormholeNewId" xml:space="preserve">
    <value>New ID :</value>
  </data>
  <data name="statusSigDeleted" xml:space="preserve">
    <value>Signature deleted!</value>
  </data>
  <data name="statusSignatureAdded" xml:space="preserve">
    <value>Signature added!</value>
  </data>
  <data name="statusSignatureUpdated" xml:space="preserve">
    <value>Signature updated!</value>
  </data>
  <data name="statusSystemAdded" xml:space="preserve">
    <value>System added!</value>
  </data>
  <data name="statusSystemClassUpdated" xml:space="preserve">
    <value>System class updated!</value>
  </data>
  <data name="statusSystemDeleted" xml:space="preserve">
    <value>System deleted!</value>
  </data>
  <data name="statusSystemEffectUpdated" xml:space="preserve">
    <value>System effect updated!</value>
  </data>
  <data name="statusSystemInfoUpdated" xml:space="preserve">
    <value>System info updated!</value>
  </data>
  <data name="statusSystemNameChanged" xml:space="preserve">
    <value>System name updated!</value>
  </data>
  <data name="statusSystemOccupationUpdated" xml:space="preserve">
    <value>System occupation info updated!</value>
  </data>
  <data name="statusWhIdUpdated" xml:space="preserve">
    <value>Wormhole ID updated!</value>
  </data>
  <data name="systemInfoConnectedWith" xml:space="preserve">
    <value>with</value>
  </data>
  <data name="systemInfoFromWh" xml:space="preserve">
    <value>through</value>
  </data>
  <data name="systemInfoNoConnections" xml:space="preserve">
    <value>no connections</value>
  </data>
  <data name="systemInfoToSys" xml:space="preserve">
    <value>to</value>
  </data>
  <data name="title" xml:space="preserve">
    <value>Map</value>
  </data>
</root>